openapi: 3.0.3
info:
  title: Invoice API
  description: |
    API description for Invoice Generation API.
  version: 1.0.2

tags:
  - name: "User Authentication (Iteration 1: Sprint 2)"
    description: The user routes designed and created in Sprint 2
  - name: "Company Endpoints (Iteration 1: Sprint 2)"
    description: The Company routes designed and created in Sprint 2
  - name: "Invoice Endpoints (Iteration 1: Sprint 2)"
    description: The Invoice routes designed and created in Sprint 2

components:
  schemas:
    # Primitive Types 
    Empty:
      type: object
    InvoiceId:
      type: string
      example: "INV-123456"
    UserID:
      type: string
      example: "USR-123456"
    CompanyID:
      type: string
      example: "CMPY-321321"
    Email:
      type: string
      example: "realEmail@gmail.com"
    Password:
      type: string
      example: "hashedPassword@123"
    NameFirst:
      type: string
      example: "John" 
    NameLast:
      type: string
      example: "Doe"
    NumSuccessfulLogins:
      type: number
      example: 2
    NumFailedPasswordsSinceLastLogin:
      type: number
      example: 3
    Age:
      type: string
      example: 22
    Gender:
      type: string
      enum: [MALE, FEMALE, OTHER]
    TimeCreated:
      type: number
      example: 2321332
    Address:
      type: string
      example: "100 Orbilvion Street"
    City:
      type: string
      example: "Sydney"
    Postcode:
      type: string
      example: "2195"
    Country:
      type: string
      example: "Australia"
    Name:
      type: string
      example: "John Doe"
    Abn: 
      type: string
      example: "51824753556"
    Owner:
      type: string
      example: "Admin One"
    Phone:
      type: string
      example: "3123123323"
    CompanyName:
      type: string
      example: "Turples Industry Inc"
    TaxIdentificationNumber:
      type: string
      example: "2313123213123"
    BankName:
      type: string
      example: "Commonwealth Bank"
    BankAccount:
      type: string
      example: "123-356"
    Iban:
      type: string
      example:  "AT611904300234573201"
    Swift:
      type: string
      example: "AAAA BB CC DDD"
    Website:
      type: string
      example: "website.com.au"
    Logo:
      type: string
      example: "Falcon.IO"
    Notes:
      type: string
      example: "Slightly damaged on border"
    ItemSku:
        type: string
        example: "SKU12345"
    ItemName:
      type: string
      example: "Wireless Keyboard"
    Description:
      type: string
      example: "Ergonomic wireless keyboard with backlight"
    Quantity:
      type: integer
      example: 2
    UnitPrice:
      type: number
      format: float
      example: 50.0
    DiscountAmount:
      type: number
      format: float
      example: 5.0
    TaxAmount:
      type: number
      format: float
      example: 4.5
    TaxRate:
      type: number
      format: float
      example: 0.09
    TotalAmount:
      type: number
      format: float
      example: 99.5
    IssueDate:
      type: number
      example: 32434242
    DueDate:
      type: number
      example: 31232131
    Repeating:
      type: boolean
      example: true
    Status:
      type: string
      enum: [DRAFT, SENT, PAID, CANCELLED]
    InvoiceState:
      type: string
      enum: [MAIN, ARCHIVED, TRASHED]
    Currency:
      type: string
      example: "AUD"
    Total:
      type: number
      example: 2133123122
    State:
      type: string
      example: "NSW"
    Terms:
      type: string
      example: "15 percent off if paid within 2 days"
    Id:
      type: number
      example: 1
    IsNew:
      type: boolean
      example: true
    AddressLine1:
      type: string
      example: "21 jump street"
    AddressLine2:
      type: string
      example: "Apartment 18"
    Suburb:
      type: string
      example: "Homebush"
    ShippingTax:
      type: string
      example: "15"
    ShippingCost:
      type: string
      example: "15"
    TaxType:
      type: string
      example: "GST"
    TaxOption:
      type: string
      example: "Flat"
    TaxAmountV2:
      type: string
      example: "15"
    IssueDateV2:
      type: Dayjs
      example: "dayjs({ hour:15, minute:10 })"
    DueDateV2:
      type: Dayjs
      example: "dayjs({ hour:15, minute:10 })"
    InvoiceNumber:
      type: number
      example: 1234
    ShippingChecked:
      type: boolean
      example: true
    WideDiscount:
      type: number
      example: 1
    Format:
      type: string
      example: "PDF"
    Subtotal:
      type: number
      example: 15
    Token:
      type: string
      example: 'jwtToken'
    Error:
      type: object
      properties:
        error:
          type: string
          example: 'OutputErrorString'
    UBL:
      type: string
      example: |
          <Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
            <cbc:ID>INV-123456</cbc:ID>
            <cac:InvoicePeriod>
              <cbc:IssueDate>32434242</cbc:IssueDate>
              <cbc:EndDate>31232131</cbc:EndDate>
            </cac:InvoicePeriod>
            <cbc:DocumentCurrencyCode>AUD</cbc:DocumentCurrencyCode>
            <cac:AccountingSupplierParty>
              <cac:Party>
                <cac:PartyName>
                  <cbc:Name>Turples Industry Inc.</cbc:Name>
                </cac:PartyName>
              </cac:Party>
            </cac:AccountingSupplierParty>
            <cac:AccountingConsumerParty>
              <cac:Party>
                <cac:PartyName>
                  <cbc:Name>Turples Industry Inc.</cbc:Name>
                </cac:PartyName>
              </cac:Party>
            </cac:AccountingConsumerParty>
            <cac:InvoiceLine>
              <cbc:ID>1</cbc:ID>
              <cac:Item>
                <cac:itemSku>SKU12345</cac:itemSku>
                <cac:itemName>Wireless Keyboard</cac:itemName>
                <cac:description>Ergonomic wireless keyboard with backlight</cac:description>
                <cac:quantity>2</cac:quantity>
                <cac:unitPrice>50</cac:unitPrice>
                <cac:discountAmount>5</cac:discountAmount>
                <cac:taxAmount>4.5</cac:taxAmount>
                <cac:taxRate>0.09</cac:taxRate>
                <cac:totalAmount>99.5</cac:totalAmount>
              </cac:Item>
            </cac:InvoiceLine>
          </Invoice> 
      
      
    InvoiceItem:
      type: object
      properties:
        itemSku:
          $ref: '#/components/schemas/ItemSku'
        itemName:
          $ref: '#/components/schemas/ItemName'
        description:
          $ref: '#/components/schemas/Description'
        quantity:
          $ref: '#/components/schemas/Quantity'
        unitPrice:
          $ref: '#/components/schemas/UnitPrice'
        discountAmount:
          $ref: '#/components/schemas/DiscountAmount'
        taxAmount:
          $ref: '#/components/schemas/TaxAmount'
        taxRate:
          $ref: '#/components/schemas/TaxRate'
        totalAmount:
          $ref: '#/components/schemas/TotalAmount'
    InvoiceItemV2:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        isNew:
          $ref: '#/components/schemas/IsNew'
        itemSku:
          $ref: '#/components/schemas/ItemSku'
        itemName:
          $ref: '#/components/schemas/ItemName'
        description:
          $ref: '#/components/schemas/Description'
        quantity:
          $ref: '#/components/schemas/Quantity'
        unitPrice:
          $ref: '#/components/schemas/UnitPrice'
        discountAmount:
          $ref: '#/components/schemas/DiscountAmount'
        totalAmount:
          $ref: '#/components/schemas/TotalAmount'
    AddressInterface:
      type: object
      properties:
        addressLine1:
          $ref: '#/components/schemas/AddressLine1'
        addressLine2:
          $ref: '#/components/schemas/AddressLine2'
        suburb:
          $ref: '#/components/schemas/Suburb'
        state:
          $ref: '#/components/schemas/State'
        postcode:
          $ref: '#/components/schemas/Postcode'
        country:
          $ref: '#/components/schemas/Country'
    ParticipantV2:
      type: object
      properties:
        companyName:
          $ref: '#/components/schemas/CompanyName'
        billingAddress:
          $ref: '#/components/schemas/AddressInterface'
        shippingAddress:
          $ref: '#/components/schemas/AddressInterface'
        email:
          $ref: '#/components/schemas/Email'
        bankName:
          $ref: '#/components/schemas/BankName'
        bankAccount:
          $ref: '#/components/schemas/BankAccount'
    Participant:
      type: object
      properties:
        companyName:
          $ref: '#/components/schemas/CompanyName'
        address:
          $ref: '#/components/schemas/Address'
        country:
          $ref: '#/components/schemas/Country'
        phone:
          $ref: '#/components/schemas/Phone'
        email:
          $ref: '#/components/schemas/Email'
        taxIdentificationNumber:
          $ref: '#/components/schemas/TaxIdentificationNumber'
        bankName:
          $ref: '#/components/schemas/BankName'
        bankAccount:
          $ref: '#/components/schemas/BankAccount'
        iban:
          $ref: '#/components/schemas/Iban'
        swift:
          $ref: '#/components/schemas/Swift'
        website:
          $ref: '#/components/schemas/Website'
        logo:
          $ref: '#/components/schemas/Logo'
        notes:
          $ref: '#/components/schemas/Notes'
    Tax:
      type: object
      properties:
        taxType:
          $ref: '#/components/schemas/TaxType'
        taxOption:
          $ref: '#/components/schemas/TaxOption'
        taxAmount:
          $ref: '#/components/schemas/TaxAmount'
    ShippingCostDetails:
      type: object
      properties:
        shippingTax:
          $ref: '#/components/schemas/ShippingTax'
        shippingCost:
          $ref: '#/components/schemas/ShippingCost'
    InvoiceDetailsV2:
      type: object
      properties:
        receiver:
          $ref: '#/components/schemas/ParticipantV2'
        issueDate:
          $ref: '#/components/schemas/IssueDateV2'
        dueDate:
          $ref: '#/components/schemas/DueDateV2'
        invoiceNumber:
          $ref: '#/components/schemas/InvoiceNumber'
        status:
          $ref: '#/components/schemas/Status'
        shippingChecked:
          $ref: '#/components/schemas/ShippingChecked'
        state:
          $ref: '#/components/schemas/InvoiceState'
        items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItemV2'
        tax:
          $ref: '#/components/schemas/Tax'
        shippingCostDetails:
          $ref: '#/components/schemas/ShippingCostDetails'
        format:
          $ref: '#/components/schemas/Format'
        currency:
          $ref: '#/components/schemas/Currency'
        subtotal:
          $ref: '#/components/schemas/Subtotal'
        total:
          $ref: '#/components/schemas/Total'
        notes:
          $ref: '#/components/schemas/Notes'
    InvoiceDetails:
      type: object
      properties:
        sender:
          $ref: '#/components/schemas/Participant'
        receiver:
          $ref: '#/components/schemas/Participant'
        issueDate:
          $ref: '#/components/schemas/IssueDate'
        dueDate:
          $ref: '#/components/schemas/DueDate'
        repeating:
          $ref: '#/components/schemas/Repeating'
        status:
          $ref: '#/components/schemas/Status'
        state:
          $ref: '#/components/schemas/InvoiceState'
        items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
        currency:
          $ref: '#/components/schemas/Currency'
        total:
          $ref: '#/components/schemas/Total'
        notes:
          $ref: '#/components/schemas/Notes'
        terms:
          $ref: '#/components/schemas/Terms'
    InvoiceV2:
      type: object
      properties:
        invoiceId:
          $ref: '#/components/schemas/InvoiceId'
        userId:
          $ref: '#/components/schemas/UserID'
        companyId:
          $ref: '#/components/schemas/CompanyID'
        details:
          $ref: '#/components/schemas/InvoiceDetailsV2'
    Invoice:
      type: object
      properties:
        invoiceId:
          $ref: '#/components/schemas/InvoiceId'
        userId:
          $ref: '#/components/schemas/UserID'
        companyId:
          $ref: '#/components/schemas/CompanyID'
        details:
          $ref: '#/components/schemas/InvoiceDetails'
    User:
      type: object
      properties:
        token:
          type: string
          example: "jwt_token_here"
        userId:
          $ref: '#/components/schemas/UserID'
        companyId:
          $ref: '#/components/schemas/CompanyID'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
        nameFirst:
          $ref: '#/components/schemas/NameFirst'
        nameLast:
          $ref: '#/components/schemas/NameLast'
        numSuccessfulLogins:
          $ref: '#/components/schemas/NumSuccessfulLogins'
        numFailedPasswordsSinceLastLogin:
          $ref: '#/components/schemas/NumFailedPasswordsSinceLastLogin'
        age:
          $ref: '#/components/schemas/Age'
        gender:
          $ref: '#/components/schemas/Gender'
        timeCreated:
          $ref: '#/components/schemas/TimeCreated'
        previousPasswords:
          type: array
          items:
            $ref: '#/components/schemas/Password'
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'

    Location:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        city:
          $ref: '#/components/schemas/City'
        state:
          $ref: '#/components/schemas/State'
        postcode:
          $ref: '#/components/schemas/Postcode'
        country:
          $ref: '#/components/schemas/Country'

    Company:
      type: object
      properties:
        companyId:
          $ref: '#/components/schemas/CompanyID'
        name:
          $ref: '#/components/schemas/CompanyName'
        abn:
          $ref: '#/components/schemas/Abn'
        headquarters:
          $ref: '#/components/schemas/Location'
        phone:
          $ref: '#/components/schemas/Phone'
        email:
          $ref: '#/components/schemas/Email'
        owner:
          $ref: '#/components/schemas/Owner'
        admins:
          type: array
          items:
            type: string
        members:
          type: array
          items:
            type: string
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
            
  securitySchemes:
    Token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  parameters:
    InvoiceId:
      in: path
      description: The Id of the invoice
      name: invoiceId
      required: true
      schema: 
        type: integer
    CompanyId:
      in: path
      description: The Id of the Company
      name: companyId
      required: true
      schema:
        type: integer
    Token:
      in: path
      description: User Token
      name: token
      required: true
      schema:
        type: string
        
  requestBodies:
    InvoiceDetailsRequestBody:
      description: Input from user's invoice details
      content:
        application/json:
          schema:
            type: object
            properties:
              sender:
                $ref: '#/components/schemas/Participant'
              receiver:
                $ref: '#/components/schemas/Participant'
              issueDate:
                $ref: '#/components/schemas/IssueDate'
              dueDate:
                $ref: '#/components/schemas/DueDate'
              repeating:
                $ref: '#/components/schemas/Repeating'
              status:
                $ref: '#/components/schemas/Status'
              state:
                $ref: '#/components/schemas/InvoiceState'
              items:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceItem'
              currency:
                $ref: '#/components/schemas/Currency'
              total:
                $ref: '#/components/schemas/Total'
              notes:
                $ref: '#/components/schemas/Notes'
              terms:
                $ref: '#/components/schemas/Terms'
    InvoiceCreationRequestBodyV2:
      description: Input from user's invoice creation V2
      content:
        application/json:
          schema:
            type: object
            properties:
              invoiceDetails: 
                $ref: '#/components/schemas/InvoiceDetailsV2'
              isDraft:
                $ref: '#/components/schemas/IsNew'
              invoiceId:
                $ref: '#/components/schemas/InvoiceId'
    CompanyRequestBody:
      description: Company registration request
      content:
        application/json:
          schema:
            type: object
            properties:
              companyName:
                $ref: '#/components/schemas/CompanyName'
              address:
                $ref: '#/components/schemas/Address'
              city:
                $ref: '#/components/schemas/City'
              state:
                $ref: '#/components/schemas/State'
              country:
                $ref: '#/components/schemas/Country'
              postcode:
                $ref: '#/components/schemas/Postcode'
              contactNumber:
                $ref: '#/components/schemas/Phone'
              companyEmail:
                $ref: '#/components/schemas/Email'
              companyAbn:
                $ref: '#/components/schemas/Abn'

    UserRegister:
      description: User registration request
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - nameFirst
              - nameLast
            properties:
              email:
                $ref: '#/components/schemas/Email'
              password:
                $ref: '#/components/schemas/Password'
              nameFirst:
                $ref: '#/components/schemas/NameFirst'
              nameLast:
                $ref: '#/components/schemas/NameLast'
              age:
                $ref: '#/components/schemas/Age'
                

    UserLogin:
      description: User login request
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                $ref: '#/components/schemas/Email'
              password:
                $ref: '#/components/schemas/Password'
                
    CompanyAddUser:
      description: Information on which user to be added to which company
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - companyId
            properties:
              email:
                $ref: '#/components/schemas/Email'
              companyId:
                $ref: '#/components/schemas/CompanyID'
    InvoiceListRequest:
      description: Information on which company 
      content:
        application/json:
          schema:
            type: object
            required:
              - companyId
            properties:
              companyId:
                $ref: '#/components/schemas/CompanyID'
                
    UBLRequestBody:
      description: UBL Request
      content:
       application/xml:
          schema:
            type: object
            required:
              - UBL
            properties:
              UBL:
                $ref: '#/components/schemas/UBL'
      

  responses:
    TokenResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
            - token
            properties:
              token:
                $ref: '#/components/schemas/Token'
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    EmptyResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
    RegisterErrorResponse:
      description: |
        If any of the following are true:
        - Email address is used by another user
        - Email does not satisfy this: https://www.npmjs.com/package/validator (validator.isEmail)
        - NameFirst contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes
        - NameFirst is less than 2 characters or more than 20 characters
        - NameLast contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes
        - NameLast is less than 2 characters or more than 20 characters
        - Password is less than 8 characters
        - Password does not contain at least one number and at least one letter
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    # Auth Login Responses
    LoginErrorResponse:
      description: |
        If any of the following are true:
        - Email address does not exist
        - Password is not correct for the given email
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    
    # Auth Logout Responses
    AuthLogoutError401:
      description: |
        Token is empty or invalid (does not refer to valid logged in user session)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    # User Retrieval Response
    UserRetrievalSuccess:
      description: |
        Retrieval of user was successful
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserRetrievalError400:
      description: |
        If parameters are not valid/missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'   
    
    UserRetrievalError401:
      description: |
        If the Session Token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'   

    # Invoice Creation Responses
    InvoiceCreationSuccess:
      description: |
        Invoice successfully created
      content:
        application/json:
          schema:
            type: object
            required:
              - invoiceId
            properties:
              invoiceId:
                $ref: '#/components/schemas/InvoiceId'
    InvoiceCreationError400:
      description: |
        If any of the following are true:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'    
    
    
    # Invoice Retrieval Responses
    InvoiceRetrievalSuccess:
      description: |
        Retrieval of Invoice was successful
      content: 
        application/json:
          schema:
            type: object
            required:
              - invoiceId
              - invoiceStatus
            allOf:
              - $ref: '#/components/schemas/Invoice'         
              - properties:
                  invoiceId:
                    $ref: '#/components/schemas/InvoiceId'   
              
        application/UBL:
            example: |
              <Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
                <cbc:ID>INV-123456</cbc:ID>
                <cac:InvoicePeriod>
                  <cbc:IssueDate>32434242</cbc:IssueDate>
                  <cbc:EndDate>31232131</cbc:EndDate>
                </cac:InvoicePeriod>
                <cbc:DocumentCurrencyCode>AUD</cbc:DocumentCurrencyCode>
                <cac:AccountingSupplierParty>
                  <cac:Party>
                    <cac:PartyName>
                      <cbc:Name>Turples Industry Inc.</cbc:Name>
                    </cac:PartyName>
                  </cac:Party>
                </cac:AccountingSupplierParty>
                <cac:AccountingConsumerParty>
                  <cac:Party>
                    <cac:PartyName>
                      <cbc:Name>Turples Industry Inc.</cbc:Name>
                    </cac:PartyName>
                  </cac:Party>
                </cac:AccountingConsumerParty>
                <cac:InvoiceLine>
                  <cbc:ID>1</cbc:ID>
                  <cac:Item>
                    <cac:itemSku>SKU12345</cac:itemSku>
                    <cac:itemName>Wireless Keyboard</cac:itemName>
                    <cac:description>Ergonomic wireless keyboard with backlight</cac:description>
                    <cac:quantity>2</cac:quantity>
                    <cac:unitPrice>50</cac:unitPrice>
                    <cac:discountAmount>5</cac:discountAmount>
                    <cac:taxAmount>4.5</cac:taxAmount>
                    <cac:taxRate>0.09</cac:taxRate>
                    <cac:totalAmount>99.5</cac:totalAmount>
                  </cac:Item>
                </cac:InvoiceLine>
              </Invoice> 
    InvoiceRetrievalError400:
      description: |
        If parameters are not valid/missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'   
    
    InvoiceRetrievalError401:
      description: |
        If the Session Token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'   
            
    InvoiceRetrievalError403:
      description: |
        If the user is unauthorised for this action:
        - Company does not own the Invoice
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'   
            

            
            
    # Invoice Edit
    
    InvoiceEditSuccess:
      description: |
        Invoice was succesfully edited
      content:
        application/json:
          schema:
            type: object
            required:
             - invoiceId
            properties:
              invoiceId:
                $ref: '#/components/schemas/InvoiceId'
        
    
    InvoiceEditError400:
      description: |
        If parameters are not valid/missing
        - Updated Details are invalid
        - InvoiceId does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    InvoiceEditError401:
      description: |
        If the session token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        
    
    InvoiceEditError403:
      description: |
        If the user is unauthorised for this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
            
    # Invoice Delete
    
    InvoiceDeleteSuccess:
      description: |
        Invoice was successfully deleted 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty' 
            
            
    InvoiceDeleteError400:
      description: |
        If parameters are not valid/missing
        - InvoiceId does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
            
    InvoiceDeleteError401:
      description: |
        If the session token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        
            
    InvoiceDeleteError403:
      description: |
        If the user is unauthorised for this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    # Invoice List
    
    InvoiceListSuccess:
      description: |
        Invoice List successfully retrieved
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Invoice'
              
    InvoiceListError401:
      description: |
        If the session token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
            
    #Invoice Empty Trash
    InvoiceEmptyTrashSuccess:
      description: |
        All invoices in trash have been deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
            
    InvoiceEmptyTrashError401:
      description: |
        If the session token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    #Company Register
    CompanyRegisterSuccess:
      description: |
        Successfully registered the company
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
            
    CompanyRegisterError400:
      description: |
        If parameters are not valid/missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    CompanyRegisterError401:
      description: |
        If the session token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 
    #Get Company
    CompanyGetSuccess:
      description: |
        Successfully get the company
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
    CompanyGet400:
      description: |
        If parameters are not valid/missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    CompanyGet401:
      description: |
        If the session token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'     
            
    # Company User Add
    CompanyUserAddSuccess:
      description: |
        User has successfully been added to the company
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
            
    CompanyUserAddError400:
      description: |
        If parameters are not valid/missing
        - Email given does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          
    CompanyUserAddError401:
      description: |
        If the session token is empty or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'     
                  
      
    CompanyUserAddError403:
      description: |
        If the user is unauthorised for this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InvoiceValidationSuccess:
      description: |
        Invoice has successfully been validated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'


            
          
    
paths:
# ===================================================================
# User Authentication Endpoints
# ===================================================================
  /v1/user/register:
    post:
      summary: Register a new user account
      description: Takes in information about a new user and registers them in the system
      tags:
        - "User Authentication (Iteration 1: Sprint 2)"
      requestBody:
        $ref: '#/components/requestBodies/UserRegister'
      responses:
        200:
          $ref: '#/components/responses/TokenResponse'
        400:
          $ref: '#/components/responses/RegisterErrorResponse'

  /v1/user/login:
    post:
      summary: Login a user
      description: Takes in information about a user to determine if they can log in
      tags:
        - "User Authentication (Iteration 1: Sprint 2)"
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'
      responses:
        200:
          $ref: '#/components/responses/TokenResponse'
        400:
          $ref: '#/components/responses/LoginErrorResponse'

  /v1/user/logout:
    post:
      summary: Logs out a user who has an active session
      description: Should be called with a token that is returned after either a login or register has been made
      tags:
        - "User Authentication (Iteration 1: Sprint 2)"
      security:
          - Token: []
      responses:
        200:
          $ref: '#/components/responses/EmptyResponse'
        401:
          $ref: '#/components/responses/AuthLogoutError401'
          
        


# ===================================================================
# Invoice Endpoints
# ===================================================================
          
  /v1/invoice/validate:
    post:
      description: |
        Validates the given Invoice Document
      tags:
        - "Invoice Endpoints (Iteration 1: Sprint 2)"
      requestBody:
        content:
          schema:
          example: |
            <Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
              <cbc:ID>INV-123456</cbc:ID>
              <cac:InvoicePeriod>
                <cbc:IssueDate>32434242</cbc:IssueDate>
                <cbc:EndDate>31232131</cbc:EndDate>
              </cac:InvoicePeriod>
              <cbc:DocumentCurrencyCode>AUD</cbc:DocumentCurrencyCode>
              <cac:AccountingSupplierParty>
                <cac:Party>
                  <cac:PartyName>
                    <cbc:Name>Turples Industry Inc.</cbc:Name>
                  </cac:PartyName>
                </cac:Party>
              </cac:AccountingSupplierParty>
              <cac:AccountingConsumerParty>
                <cac:Party>
                  <cac:PartyName>
                    <cbc:Name>Turples Industry Inc.</cbc:Name>
                  </cac:PartyName>
                </cac:Party>
              </cac:AccountingConsumerParty>
              <cac:InvoiceLine>
                <cbc:ID>1</cbc:ID>
                <cac:Item>
                  <cac:itemSku>SKU12345</cac:itemSku>
                  <cac:itemName>Wireless Keyboard</cac:itemName>
                  <cac:description>Ergonomic wireless keyboard with backlight</cac:description>
                  <cac:quantity>2</cac:quantity>
                  <cac:unitPrice>50</cac:unitPrice>
                  <cac:discountAmount>5</cac:discountAmount>
                  <cac:taxAmount>4.5</cac:taxAmount>
                  <cac:taxRate>0.09</cac:taxRate>
                  <cac:totalAmount>99.5</cac:totalAmount>
                </cac:Item>
              </cac:InvoiceLine>
            </Invoice> 
      responses:
        200:
          $ref: '#/components/responses/InvoiceValidationSuccess'
  # Invoice Creation    
  /v1/invoice:
    post:
      summary: Creates a new invoice  
      description: Creating an Invoice Document including the given ID and storing it
      tags:
        - "Invoice Endpoints (Iteration 1: Sprint 2)"
      security:
          - Token: []
      requestBody:
        $ref: '#/components/requestBodies/InvoiceDetailsRequestBody'
      responses:
        200:
          $ref: '#/components/responses/InvoiceDeleteSuccess'
        400:
          $ref: '#/components/responses/InvoiceCreationError400'
          
  # Invoice Retrieval      
  /v1/invoice/{invoiceId}:
    get:
      summary: Retrieves an invoice
      description: Retrieves an invoice using the given invoiceId in the given format
      tags:
        - "Invoice Endpoints (Iteration 1: Sprint 2)"
      security:
        - Token: []
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      responses:
        200: 
          $ref: '#/components/responses/InvoiceRetrievalSuccess'
        400:
          $ref: '#/components/responses/InvoiceRetrievalError400'
        401:
          $ref: '#/components/responses/InvoiceRetrievalError401'
        403:
          $ref: '#/components/responses/InvoiceRetrievalError403'
                    
  # Invoice Delete
    delete:
      summary: Permanently deletes the Invoice with the given ID
      description: Removes the invoice permanently
      tags:
        - "Invoice Endpoints (Iteration 1: Sprint 2)"
      security:
        - Token: []
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      responses:
        200:
          $ref: '#/components/responses/InvoiceDeleteSuccess'
        400:
          $ref: '#/components/responses/InvoiceDeleteError400'
        401:
          $ref: '#/components/responses/InvoiceDeleteError401'
        403:
          $ref: '#/components/responses/InvoiceDeleteError403'
      
  /v1/invoice/{invoiceId}/pdf:
    post:
      summary: Generate a PDF for the given Invoice ID
      description: Generates and returns a PDF file for the specified invoice.
      tags:
        - "Invoice Endpoints (Iteration 1: Sprint 3)"
      security:
        - Token: []
      parameters:
        - name: invoiceId
          in: path
          required: true
          description: The ID of the invoice to generate the PDF for.
          schema:
            type: string
            example: "6f5bddd6-57cf-4250-b59f-bed5189aaf3e"
      responses:
        200:
          $ref: '#/components/responses/InvoicePDFSuccess'
        400:
          $ref: '#/components/responses/InvoicePDFError400'
        401:
          $ref: '#/components/responses/InvoicePDFError401'
        403:
          $ref: '#/components/responses/InvoicePDFError403'

  /v2/invoice/:
      post:
        summary: Create an invoice.
        description: Creates an invoice with blank fields given an invoice ID.
        tags:
          - "Invoice Endpoints (Iteration 1: Sprint 3)"
        security:
          - Token: []
        requestBody:
          $ref: '#/components/requestBodies/InvoiceCreationRequestBodyV2'
        responses:
          200:
            $ref: '#/components/responses/InvoiceCreationSuccess'
          400:
            $ref: '#/components/responses/InvoiceCreationError400'

  /v1/user/details:
    get:
      summary: Retrieves user details
      description: Retrieves details about a user given their JWT.
      tags:
        - "User Endpoints (Iteration 1: Sprint 3"
      security:
        - Token: []
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        200: 
          $ref: '#/components/responses/UserRetrievalSuccess'
        400:
          $ref: '#/components/responses/UserRetrievalError400'
        401:
          $ref: '#/components/responses/UserRetrievalError401'
        403:
          $ref: '#/components/responses/UserRetrievalError403'

  # Invoice Edit 
  /v1/invoice/{invoiceId}/edit:
    put:
      summary: Edit the details of the given InvoiceId
      description: Updates the Invoice Document with the given ID and the new content
      tags:
        - "Invoice Endpoints (Iteration 1: Sprint 2)"
      security:
        - Token: []
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      requestBody:
        $ref: '#/components/requestBodies/InvoiceDetailsRequestBody'
      responses:
        200: 
          $ref: '#/components/responses/InvoiceEditSuccess'
        400:
          $ref: '#/components/responses/InvoiceEditError400'
        401:
          $ref: '#/components/responses/InvoiceEditError401'
        403:
          $ref: '#/components/responses/InvoiceEditError403'
  

# ===================================================================
# Company Endpoints 
# ===================================================================   

  /v1/company/register:
    post:
      summary: Register a company into the system 
      description: Register a new business to be able to access the functionality of the API
      security:
        - Token: []
      tags:
        - "Company Endpoints (Iteration 1: Sprint 2)"
      requestBody:
        $ref: '#/components/requestBodies/CompanyRequestBody'
      responses:
        200:
          $ref: '#/components/responses/CompanyRegisterSuccess'
        400:
          $ref: '#/components/responses/CompanyRegisterError400'
        401:
          $ref: '#/components/responses/CompanyRegisterError401'
        
  /v1/company/{companyId}:
    get:
      summary: Retrieves a company's details.
      description: View a company's details.
      security:
        - Token: []
      tags:
        - "Company Endpoints (Iteration 1: Sprint 3)"
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      responses:
        200:
          $ref: '#/components/responses/CompanyRegisterSuccess'
        400:
          $ref: '#/components/responses/CompanyRegisterError400'
        401:
          $ref: '#/components/responses/CompanyRegisterError401'
  /v1/company/userAdd:
    put:
      summary: Adds the given user to the company 
      description: Adds the given user to the company providing the user access to selected company invoices
      tags:
        - "Company Endpoints (Iteration 1: Sprint 2)"
      security:
        - Token: []
      requestBody:
        $ref: '#/components/requestBodies/CompanyAddUser'
      responses:
        200:
          $ref: '#/components/responses/CompanyUserAddSuccess'
        400:
          $ref: '#/components/responses/CompanyUserAddError400'
        401:
          $ref: '#/components/responses/CompanyUserAddError401'
        403:
          $ref: '#/components/responses/CompanyUserAddError403'   
    
  
  # Invoice List
  /v1/company/{companyId}/invoices:
    get:
      summary: Returns a list of known invoices
      description: Fetches a list of invoice that user has access to
      tags:
        - "Company Endpoints (Iteration 1: Sprint 2)"
      security:
        - Token: []
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      # requestBody:
      #   - $ref: '#/components/requestBodies/InvoiceList'
      responses:
        200:
          $ref: '#/components/responses/InvoiceListSuccess'
        401:
          $ref: '#/components/responses/InvoiceListError401'
        
    
      
  
      
    
    

